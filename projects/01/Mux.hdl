// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux.hdl

/** 
 * Multiplexor:
 * out = a if sel == 0
 *       b otherwise
 */

CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
	/** 
	 * From Mux truth table
	 *		sel | out
	 * 		 0  | a
	 *       1  | b
	 *
	 * We come with the expression (notsel & a ) | (sel & b)
	 * Then, we use Boolean algebra to transform the above expression to using Nand
	 */
	
	Not(in = sel, out = notsel);
    Nand(a = notsel, b = a, out = clause1);
    Nand(a = sel, b = b, out = clause2);
    Nand(a = clause1, b = clause2, out = out);
}

/**

Another way to implement using long form

	Not (in = a, out = nota);
	Not (in = b, out = notb);
	Not (in = sel, out = notsel);
	And (a = b, b = sel, out = bAndsel);
	And (a = a, b = notsel, out = aAndNotsel);
	And (a = nota, b = bAndsel, out = clause1);
	And (a = a, b = bAndsel, out = clause4);
	And (a = aAndNotsel, b = notb, out = clause2);
	And (a = aAndNotsel, b = b, out = clause3);
	Or (a = clause1, b = clause2, out = clause1OrClause2);
	Or (a = clause1OrClause2, b = clause3, out = clause1OrClause2OrClause3);
	Or (a = clause1OrClause2OrClause3, b = clause4, out = out);
*/