// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength = 0) {
            return this;
        }

        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, or of the string prefix
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, digit, i;
        let v = 0;

        // 45 is '-'
        if (str[0] = 45) {
            let i = 1;
        } else {
            let i = 0;
        }

        while (i < length) {
            let digit = str[i] - 48;
            let v = v*10 + digit;
            let i = i + 1;
        }

        if (str[0] = 45) {
            return -v;
        }

        return v;
    }

    function int mod(int x, int k) {
      var int quotient;
      let quotient = x/k;
      return x - (quotient*k);
    }

    function String int2String(int val) {
        var int lastDigit;
        var String tempStr;

        let lastDigit = String.mod(val, 10);
        if (val < 10) {
            let tempStr = String.new(10);
            let tempStr = tempStr.appendChar(lastDigit + 48);
        } else {
            let tempStr = String.int2String(val/10);
            let tempStr = tempStr.appendChar(lastDigit + 48);
        }
        return tempStr;
    }

    function int numberOfChars(int val) {
        var int absVal, cnt, i;
        if (val = 0) {
            return 1;
        }

        let absVal = Math.abs(val);
        let cnt = 0;
        let i = 0;
        while (absVal > 0) {
            let cnt = cnt + 1;
            let absVal = absVal/10;
        }

        if (val < 0) {
            return cnt + 1;
        }
        return cnt;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int absVal, lastDigit, i;
        let length = String.numberOfChars(val);

        let absVal = Math.abs(val);
        let i = length - 1;
        while (absVal > 0) {
            let lastDigit = String.mod(absVal, 10);
            let str[i] = lastDigit + 48;
            let i = i - 1;
            let absVal = absVal/10;
        }

        if (val < 0) {
            let str[0] = 45;    // 45 is '-'
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
