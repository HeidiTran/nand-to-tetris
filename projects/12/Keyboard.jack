// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        // In the Hack platform, the memory map of the keyboard 
        // is a single 16-bit word located at memory address 24576.
        var int keyVal;
        let keyVal = Memory.peek(24576);    // Key pressed is stored in RAM[24576]
        if (keyVal = 0) {
            return 0;
        }
        return keyVal;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c, key;

        // display the cursor: small filled square
        do Output.printChar(32767);

        // while no key is pressed, do nothing
        // wait till a key is pressed
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }

        let c = key;

        // while a key is pressed, do nothing
        // wait for the user to let go
        while (~(key = 0)) {
            let key = Keyboard.keyPressed();
        }

        // print c at the current cursor location
        // and advances the cursor one column forward
        do Output.backSpace();
        do Output.printChar(c);
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var char c;

        do Output.printString(message);

        // Pick a large number for maxLength
        // TODO: What if overflow?
        let s = String.new(256);
        while(true) {
            let c = Keyboard.readChar();
            if (c = String.newLine()) {
                do Output.println();
                return s;
            }

            if (c = String.backSpace()) {
                do s.eraseLastChar();
                // TODO: moves the cursor 1 col back
            } else {
                let s = s.appendChar(c);
            }
        }
        return s;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        let s = Keyboard.readLine(message);
        return s.intValue();
    }
}
