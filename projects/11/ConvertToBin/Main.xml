<class>
  <keyword> class </keyword>
  <identifier>
    <identifier> Main </identifier>
    <category> class </category>
    <isBeingDefined> True </isBeingDefined>
    <isOneOf4Kinds> False </isOneOf4Kinds>
    <runningIdx> -1 </runningIdx>
  </identifier>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <identifier> main </identifier>
      <category> subroutine </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> False </isOneOf4Kinds>
      <runningIdx> -1 </runningIdx>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <identifier> value </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 0 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <identifier> Main </identifier>
            <category> class </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> False </isOneOf4Kinds>
            <runningIdx> -1 </runningIdx>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <identifier> fillMemory </identifier>
            <category> subroutine </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> False </isOneOf4Kinds>
            <runningIdx> -1 </runningIdx>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 8001 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 16 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <identifier> value </identifier>
            <category> var </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> True </isOneOf4Kinds>
            <runningIdx> 0 </runningIdx>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <identifier> Memory </identifier>
                <category> class </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> False </isOneOf4Kinds>
                <runningIdx> -1 </runningIdx>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <identifier> peek </identifier>
                <category> subroutine </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> False </isOneOf4Kinds>
                <runningIdx> -1 </runningIdx>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 8000 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <identifier> Main </identifier>
            <category> class </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> False </isOneOf4Kinds>
            <runningIdx> -1 </runningIdx>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <identifier> convert </identifier>
            <category> subroutine </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> False </isOneOf4Kinds>
            <runningIdx> -1 </runningIdx>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>
                  <identifier> value </identifier>
                  <category> var </category>
                  <isBeingDefined> False </isBeingDefined>
                  <isOneOf4Kinds> True </isOneOf4Kinds>
                  <runningIdx> 0 </runningIdx>
                </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <identifier> convert </identifier>
      <category> subroutine </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> False </isOneOf4Kinds>
      <runningIdx> -1 </runningIdx>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier>
        <identifier> value </identifier>
        <category> arg </category>
        <isBeingDefined> True </isBeingDefined>
        <isOneOf4Kinds> True </isOneOf4Kinds>
        <runningIdx> 0 </runningIdx>
      </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <identifier> mask </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 0 </runningIdx>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <identifier> position </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 1 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier>
          <identifier> loop </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 2 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <identifier> loop </identifier>
            <category> var </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> True </isOneOf4Kinds>
            <runningIdx> 2 </runningIdx>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <identifier> loop </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 2 </runningIdx>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> position </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 1 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> position </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 1 </runningIdx>
                  </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> mask </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 0 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> Main </identifier>
                    <category> class </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> False </isOneOf4Kinds>
                    <runningIdx> -1 </runningIdx>
                  </identifier>
                  <symbol> . </symbol>
                  <identifier>
                    <identifier> nextMask </identifier>
                    <category> subroutine </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> False </isOneOf4Kinds>
                    <runningIdx> -1 </runningIdx>
                  </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier>
                          <identifier> mask </identifier>
                          <category> var </category>
                          <isBeingDefined> False </isBeingDefined>
                          <isOneOf4Kinds> True </isOneOf4Kinds>
                          <runningIdx> 0 </runningIdx>
                        </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier>
                          <identifier> position </identifier>
                          <category> var </category>
                          <isBeingDefined> False </isBeingDefined>
                          <isOneOf4Kinds> True </isOneOf4Kinds>
                          <runningIdx> 1 </runningIdx>
                        </identifier>
                      </term>
                      <symbol> &gt; </symbol>
                      <term>
                        <integerConstant> 16 </integerConstant>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                                <identifier>
                                  <identifier> value </identifier>
                                  <category> arg </category>
                                  <isBeingDefined> False </isBeingDefined>
                                  <isOneOf4Kinds> True </isOneOf4Kinds>
                                  <runningIdx> 0 </runningIdx>
                                </identifier>
                              </term>
                              <symbol> &amp; </symbol>
                              <term>
                                <identifier>
                                  <identifier> mask </identifier>
                                  <category> var </category>
                                  <isBeingDefined> False </isBeingDefined>
                                  <isOneOf4Kinds> True </isOneOf4Kinds>
                                  <runningIdx> 0 </runningIdx>
                                </identifier>
                              </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                          <symbol> = </symbol>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier>
                        <identifier> Memory </identifier>
                        <category> class </category>
                        <isBeingDefined> False </isBeingDefined>
                        <isOneOf4Kinds> False </isOneOf4Kinds>
                        <runningIdx> -1 </runningIdx>
                      </identifier>
                      <symbol> . </symbol>
                      <identifier>
                        <identifier> poke </identifier>
                        <category> subroutine </category>
                        <isBeingDefined> False </isBeingDefined>
                        <isOneOf4Kinds> False </isOneOf4Kinds>
                        <runningIdx> -1 </runningIdx>
                      </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 8000 </integerConstant>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <identifier>
                              <identifier> position </identifier>
                              <category> var </category>
                              <isBeingDefined> False </isBeingDefined>
                              <isOneOf4Kinds> True </isOneOf4Kinds>
                              <runningIdx> 1 </runningIdx>
                            </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 1 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier>
                        <identifier> Memory </identifier>
                        <category> class </category>
                        <isBeingDefined> False </isBeingDefined>
                        <isOneOf4Kinds> False </isOneOf4Kinds>
                        <runningIdx> -1 </runningIdx>
                      </identifier>
                      <symbol> . </symbol>
                      <identifier>
                        <identifier> poke </identifier>
                        <category> subroutine </category>
                        <isBeingDefined> False </isBeingDefined>
                        <isOneOf4Kinds> False </isOneOf4Kinds>
                        <runningIdx> -1 </runningIdx>
                      </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 8000 </integerConstant>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <identifier>
                              <identifier> position </identifier>
                              <category> var </category>
                              <isBeingDefined> False </isBeingDefined>
                              <isOneOf4Kinds> True </isOneOf4Kinds>
                              <runningIdx> 1 </runningIdx>
                            </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <identifier> loop </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 2 </runningIdx>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier>
      <identifier> nextMask </identifier>
      <category> subroutine </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> False </isOneOf4Kinds>
      <runningIdx> -1 </runningIdx>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier>
        <identifier> mask </identifier>
        <category> arg </category>
        <isBeingDefined> True </isBeingDefined>
        <isOneOf4Kinds> True </isOneOf4Kinds>
        <runningIdx> 0 </runningIdx>
      </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <identifier> mask </identifier>
                <category> arg </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 0 </runningIdx>
              </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier>
                    <identifier> mask </identifier>
                    <category> arg </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 0 </runningIdx>
                  </identifier>
                </term>
                <symbol> * </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <identifier> fillMemory </identifier>
      <category> subroutine </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> False </isOneOf4Kinds>
      <runningIdx> -1 </runningIdx>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier>
        <identifier> startAddress </identifier>
        <category> arg </category>
        <isBeingDefined> True </isBeingDefined>
        <isOneOf4Kinds> True </isOneOf4Kinds>
        <runningIdx> 0 </runningIdx>
      </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier>
        <identifier> length </identifier>
        <category> arg </category>
        <isBeingDefined> True </isBeingDefined>
        <isOneOf4Kinds> True </isOneOf4Kinds>
        <runningIdx> 1 </runningIdx>
      </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier>
        <identifier> value </identifier>
        <category> arg </category>
        <isBeingDefined> True </isBeingDefined>
        <isOneOf4Kinds> True </isOneOf4Kinds>
        <runningIdx> 2 </runningIdx>
      </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <identifier> length </identifier>
                <category> arg </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 1 </runningIdx>
              </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>
                <identifier> Memory </identifier>
                <category> class </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> False </isOneOf4Kinds>
                <runningIdx> -1 </runningIdx>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <identifier> poke </identifier>
                <category> subroutine </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> False </isOneOf4Kinds>
                <runningIdx> -1 </runningIdx>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier>
                      <identifier> startAddress </identifier>
                      <category> arg </category>
                      <isBeingDefined> False </isBeingDefined>
                      <isOneOf4Kinds> True </isOneOf4Kinds>
                      <runningIdx> 0 </runningIdx>
                    </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier>
                      <identifier> value </identifier>
                      <category> arg </category>
                      <isBeingDefined> False </isBeingDefined>
                      <isOneOf4Kinds> True </isOneOf4Kinds>
                      <runningIdx> 2 </runningIdx>
                    </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> length </identifier>
                <category> arg </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 1 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> length </identifier>
                    <category> arg </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 1 </runningIdx>
                  </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> startAddress </identifier>
                <category> arg </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 0 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> startAddress </identifier>
                    <category> arg </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 0 </runningIdx>
                  </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
