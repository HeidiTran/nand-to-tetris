   @256
   D=A
   @SP
   M=D
   @$ret.0
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @LCL
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @ARG
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THIS
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THAT
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @5
   D=A
   @SP
   D=M-D
   @ARG
   M=D
   @SP
   D=M
   @LCL
   M=D
   @Sys.init
   0;JMP
($ret.0)
// function Main.fibonacci 0
(Main.fibonacci)
   D=0
// push argument 0
   @0
   D=A
   @ARG
   A=M+D
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
// push constant 2
   @2
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
// lt
   @SP
   AM=M-1
   D=M
   A=A-1
   D=M-D
   @IF_0
   D;JLT
   D=0
   @FINALLY_0
   0;JMP
(IF_0)
   D=-1
(FINALLY_0)
   @SP
   A=M-1
   M=D
// if-goto IF_TRUE
   @SP
   AM=M-1
   D=M
   @IF_TRUE
   D;JNE
// goto IF_FALSE
   @IF_FALSE
   0;JMP
// label IF_TRUE
(IF_TRUE)
// push argument 0
   @0
   D=A
   @ARG
   A=M+D
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
// return
   @LCL
   D=M
   @R13
   M=D
   @5
   D=A
   @R13
   A=M-D
   D=M
   @R14
   M=D
   @SP
   AM=M-1
   D=M
   @ARG
   A=M
   M=D
   @ARG
   D=M+1
   @SP
   M=D
   @1
   D=A
   @R13
   A=M-D
   D=M
   @THAT
   M=D
   @2
   D=A
   @R13
   A=M-D
   D=M
   @THIS
   M=D
   @3
   D=A
   @R13
   A=M-D
   D=M
   @ARG
   M=D
   @4
   D=A
   @R13
   A=M-D
   D=M
   @LCL
   M=D
   @R14
   A=M
   0;JMP
// label IF_FALSE
(IF_FALSE)
// push argument 0
   @0
   D=A
   @ARG
   A=M+D
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
// push constant 2
   @2
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
// sub
   @SP
   AM=M-1
   D=M
   A=A-1
   M=M-D
// call Main.fibonacci 1
   @Main$ret.0
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @LCL
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @ARG
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THIS
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THAT
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @6
   D=A
   @SP
   D=M-D
   @ARG
   M=D
   @SP
   D=M
   @LCL
   M=D
   @Main.fibonacci
   0;JMP
(Main$ret.0)
// push argument 0
   @0
   D=A
   @ARG
   A=M+D
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
// push constant 1
   @1
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
// sub
   @SP
   AM=M-1
   D=M
   A=A-1
   M=M-D
// call Main.fibonacci 1
   @Main$ret.1
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @LCL
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @ARG
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THIS
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THAT
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @6
   D=A
   @SP
   D=M-D
   @ARG
   M=D
   @SP
   D=M
   @LCL
   M=D
   @Main.fibonacci
   0;JMP
(Main$ret.1)
// add
   @SP
   AM=M-1
   D=M
   A=A-1
   M=M+D
// return
   @LCL
   D=M
   @R13
   M=D
   @5
   D=A
   @R13
   A=M-D
   D=M
   @R14
   M=D
   @SP
   AM=M-1
   D=M
   @ARG
   A=M
   M=D
   @ARG
   D=M+1
   @SP
   M=D
   @1
   D=A
   @R13
   A=M-D
   D=M
   @THAT
   M=D
   @2
   D=A
   @R13
   A=M-D
   D=M
   @THIS
   M=D
   @3
   D=A
   @R13
   A=M-D
   D=M
   @ARG
   M=D
   @4
   D=A
   @R13
   A=M-D
   D=M
   @LCL
   M=D
   @R14
   A=M
   0;JMP
// function Sys.init 0
(Sys.init)
   D=0
// push constant 4
   @4
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
// call Main.fibonacci 1
   @Sys$ret.0
   D=A
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @LCL
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @ARG
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THIS
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @THAT
   D=M
   @SP
   A=M
   M=D
   @SP
   M=M+1
   @6
   D=A
   @SP
   D=M-D
   @ARG
   M=D
   @SP
   D=M
   @LCL
   M=D
   @Main.fibonacci
   0;JMP
(Sys$ret.0)
// label WHILE
(WHILE)
// goto WHILE
   @WHILE
   0;JMP
