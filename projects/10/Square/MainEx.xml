<class>
  <keyword> class </keyword>
  <identifier>
    <identifier> Main </identifier>
    <category> class </category>
    <isBeingDefined> True </isBeingDefined>
    <isOneOf4Kinds> False </isOneOf4Kinds>
    <runningIdx> -1 </runningIdx>
  </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier>
      <identifier> test </identifier>
      <category> static </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> True </isOneOf4Kinds>
      <runningIdx> 0 </runningIdx>
    </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <identifier> main </identifier>
      <category> subroutine </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> False </isOneOf4Kinds>
      <runningIdx> -1 </runningIdx>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier>
          <identifier> SquareGame </identifier>
          <category> class </category>
          <isBeingDefined> False </isBeingDefined>
          <isOneOf4Kinds> False </isOneOf4Kinds>
          <runningIdx> -1 </runningIdx>
        </identifier>
        <identifier>
          <identifier> game </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 0 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <identifier> game </identifier>
            <category> var </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> True </isOneOf4Kinds>
            <runningIdx> 0 </runningIdx>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <identifier> SquareGame </identifier>
                <category> class </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> False </isOneOf4Kinds>
                <runningIdx> -1 </runningIdx>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <identifier> new </identifier>
                <category> subroutine </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> False </isOneOf4Kinds>
                <runningIdx> -1 </runningIdx>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <identifier> game </identifier>
            <category> var </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> True </isOneOf4Kinds>
            <runningIdx> 0 </runningIdx>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <identifier> run </identifier>
            <category> subroutine </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> False </isOneOf4Kinds>
            <runningIdx> -1 </runningIdx>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <identifier> game </identifier>
            <category> var </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> True </isOneOf4Kinds>
            <runningIdx> 0 </runningIdx>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <identifier> dispose </identifier>
            <category> subroutine </category>
            <isBeingDefined> False </isBeingDefined>
            <isOneOf4Kinds> False </isOneOf4Kinds>
            <runningIdx> -1 </runningIdx>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <identifier> more </identifier>
      <category> subroutine </category>
      <isBeingDefined> True </isBeingDefined>
      <isOneOf4Kinds> False </isOneOf4Kinds>
      <runningIdx> -1 </runningIdx>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <identifier> i </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 0 </runningIdx>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <identifier> j </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 1 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier>
          <identifier> String </identifier>
          <category> class </category>
          <isBeingDefined> False </isBeingDefined>
          <isOneOf4Kinds> False </isOneOf4Kinds>
          <runningIdx> -1 </runningIdx>
        </identifier>
        <identifier>
          <identifier> s </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 2 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier>
          <identifier> Array </identifier>
          <category> class </category>
          <isBeingDefined> False </isBeingDefined>
          <isOneOf4Kinds> False </isOneOf4Kinds>
          <runningIdx> -1 </runningIdx>
        </identifier>
        <identifier>
          <identifier> a </identifier>
          <category> var </category>
          <isBeingDefined> True </isBeingDefined>
          <isOneOf4Kinds> True </isOneOf4Kinds>
          <runningIdx> 3 </runningIdx>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> s </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 2 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <stringConstant> string constant </stringConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> s </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 2 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <keyword> null </keyword>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> a </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 3 </runningIdx>
              </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> a </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 3 </runningIdx>
                  </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> i </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 0 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> i </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 0 </runningIdx>
                  </identifier>
                </term>
                <symbol> * </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> - </symbol>
                      <term>
                        <identifier>
                          <identifier> j </identifier>
                          <category> var </category>
                          <isBeingDefined> False </isBeingDefined>
                          <isOneOf4Kinds> True </isOneOf4Kinds>
                          <runningIdx> 1 </runningIdx>
                        </identifier>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> j </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 1 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> j </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 1 </runningIdx>
                  </identifier>
                </term>
                <symbol> / </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> - </symbol>
                      <term>
                        <integerConstant> 2 </integerConstant>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <identifier> i </identifier>
                <category> var </category>
                <isBeingDefined> False </isBeingDefined>
                <isOneOf4Kinds> True </isOneOf4Kinds>
                <runningIdx> 0 </runningIdx>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <identifier> i </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 0 </runningIdx>
                  </identifier>
                </term>
                <symbol> | </symbol>
                <term>
                  <identifier>
                    <identifier> j </identifier>
                    <category> var </category>
                    <isBeingDefined> False </isBeingDefined>
                    <isOneOf4Kinds> True </isOneOf4Kinds>
                    <runningIdx> 1 </runningIdx>
                  </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
