/** Implements a graphical apple. */
class Apple {
   field int X, Y; // screen location of the apple's top-left corner
   static int jumpSize, petalSize;

   /** Constructs a new apple*/
   constructor Apple new(RandNumGen rX, RandNumGen rY) {
      let jumpSize = Utils.getJumpSize();
      let petalSize = 3;
      let X = getRandomX(rX);
      let Y = getRandomY(rY);
      do draw();
      return this;
   }

   /** Disposes the apple. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the apple on the screen. */
   method void draw() {
      var int  twoPetalsize;
      let twoPetalsize = 2 * petalSize;
      do Utils.drawSquare(X + petalSize, Y, petalSize);
      do Utils.drawSquare(X + petalSize, Y + twoPetalsize, petalSize);
      do Utils.drawSquare(X, Y + petalSize, petalSize);
      do Utils.drawSquare(X + twoPetalsize, Y + petalSize, petalSize);
      return;
   }

   /** Get a random X coordinate for the apple. */
   method int getRandomX(RandNumGen rand) {
      var int randNum;
      let randNum = rand.getRandNum();
      return randNum*jumpSize + 5;  // 5 is minX
   }

   /** Get a random Y coordinate for the apple. */
   method int getRandomY(RandNumGen rand) {
      var int randNum;
      let randNum = rand.getRandNum();
      return randNum*jumpSize + 3;  // 3 is minY
   }

   /** Accessors. */
   method int getX() { return X; }
   method int getY() { return Y; }
}

