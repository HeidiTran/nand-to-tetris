/**
 * Controls the snake with arrow keys.
 * Goal: Eat as many apples as possible.
 * The snake will die if it hits a wall.
 * The 'q' key is used to quit the game.
 */

class SnakeGame {
   field Snake snake; // the snake of this game
   field int direction; // the snake's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right

   /** Constructs a new Snake Game. */
   constructor SnakeGame new() {
      // Creates a two-chunk snake and positions it in the top left
      // of the screen.
      var int jumpSize;
      let jumpSize = Utils.getJumpSize();
      let snake = Snake.new(5 + (jumpSize * 2), 3 + jumpSize);
      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do snake.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Turn the snake in the current direction. */
   method void turnSnake() {
      if (direction = 1) { do snake.moveUp(); }
      if (direction = 2) { do snake.moveDown(); }
      if (direction = 3) { do snake.moveLeft(); }
      if (direction = 4) { do snake.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the snake accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      do Utils.drawScreenBorder();
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do turnSnake();
            do Sys.wait(100);
         }
         if (key = 81)  { let exit = true; }   // q key
         if ((key = 131) & (~(direction = 2))) { let direction = 1; }   // up arrow
         if (key = 133 & (~(direction = 1))) { let direction = 2; }   // down arrow
         if (key = 130 & (~(direction = 4))) { let direction = 3; }   // left arrow
         if (key = 132 & (~(direction = 3))) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do turnSnake();
            do Sys.wait(100);
         }
     } 
     return;
   }
}



